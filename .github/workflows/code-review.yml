name: Code Review
'on':
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs: 
  summarize:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Install Ollama
      run: curl -fsSL https://ollama.com/install.sh | sh
      
    - name: Run Ollama
      run: |
        ollama serve &
        sleep 10
        ollama pull llama3.2:latest
        
    - name: Checkout pull request head
      id: checkout_per_head
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Code reviewing
      id: review
      run: |
        git checkout ${{ github.base_ref }}
        git pull
        git checkout ${{ github.head_ref }}
        
        echo "Reviewing Pull Request for branch $(git branch --show-current):"
        mycode=$(git diff ${{ github.base_ref }})
        

        
        review_output=$(ollama run llama3.2:latest 'Review this code: '"$mycode"', provide suggestions for improvment, coding best practices, improve readability, Give an overall rating: ✅ Looks good | ⚠️ Needs attention | ❌ Needs major changes, Brief overview of what this PR does. Don'\''t provide any code, just the summary and the review, I want everything to be in markdown format with tables that summarizes the files changed and the changes made.')
        
        # Save output to file to preserve formatting
        echo "$review_output" > /tmp/review.md
        
        # Use heredoc to preserve formatting in GitHub output
        {
          echo 'review<<EOF'
          cat /tmp/review.md
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const review = `${{ steps.review.outputs.review }}`;
          
          // Find existing review comment to update it
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'User' && 
            comment.body.includes('🤖 AI Code Review Summary')
          );
          
          const reviewBody = `## 🤖 AI Code Review Summary

${review}

---
*This review was generated automatically using Ollama (llama3.2) • Updated: ${new Date().toLocaleString()}*`;

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewBody
                        });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewBody
            });
          }